// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/protobuf/account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_GetOTPForLogin_FullMethodName            = "/AccountService/GetOTPForLogin"
	AccountService_UserLoginViaOTP_FullMethodName           = "/AccountService/UserLoginViaOTP"
	AccountService_UserLoginViaPassword_FullMethodName      = "/AccountService/UserLoginViaPassword"
	AccountService_GetOTPForSignUp_FullMethodName           = "/AccountService/GetOTPForSignUp"
	AccountService_UserSignUpViaOTP_FullMethodName          = "/AccountService/UserSignUpViaOTP"
	AccountService_SignedUpUserSettingPw_FullMethodName     = "/AccountService/SignedUpUserSettingPw"
	AccountService_GetProfile_FullMethodName                = "/AccountService/GetProfile"
	AccountService_UpdateProfile_FullMethodName             = "/AccountService/UpdateProfile"
	AccountService_UpdatePasswordUsingOldPw_FullMethodName  = "/AccountService/UpdatePasswordUsingOldPw"
	AccountService_GetOTPForPwChange_FullMethodName         = "/AccountService/GetOTPForPwChange"
	AccountService_VerifyOTPForPwChange_FullMethodName      = "/AccountService/VerifyOTPForPwChange"
	AccountService_SetNewPwAfterVerifyingOTP_FullMethodName = "/AccountService/SetNewPwAfterVerifyingOTP"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// Login
	GetOTPForLogin(ctx context.Context, in *GetOTPForLoginRequest, opts ...grpc.CallOption) (*GetOTPForLoginResponse, error)
	UserLoginViaOTP(ctx context.Context, in *UserLoginViaOTPRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserLoginViaPassword(ctx context.Context, in *UserLoginViaPasswordRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// Sign up
	GetOTPForSignUp(ctx context.Context, in *GetOTPForSignUpRequest, opts ...grpc.CallOption) (*GetOTPForSignUpResponse, error)
	UserSignUpViaOTP(ctx context.Context, in *UserSignUpViaOTPRequest, opts ...grpc.CallOption) (*UserSignUpViaOTPResponse, error)
	SignedUpUserSettingPw(ctx context.Context, in *SignedUpUserSettingPwRequest, opts ...grpc.CallOption) (*SignedUpUserSettingPwResponse, error)
	// profile
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePasswordUsingOldPw(ctx context.Context, in *UpdatePasswordUsingOldPwRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Password reset
	GetOTPForPwChange(ctx context.Context, in *GetOTPForPwChangeRequest, opts ...grpc.CallOption) (*GetOTPForPwChangeResponse, error)
	VerifyOTPForPwChange(ctx context.Context, in *VerifyOTPForPwChangeRequest, opts ...grpc.CallOption) (*VerifyOTPForPwChangeResponse, error)
	SetNewPwAfterVerifyingOTP(ctx context.Context, in *SetNewPwAfterVerifyingOTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetOTPForLogin(ctx context.Context, in *GetOTPForLoginRequest, opts ...grpc.CallOption) (*GetOTPForLoginResponse, error) {
	out := new(GetOTPForLoginResponse)
	err := c.cc.Invoke(ctx, AccountService_GetOTPForLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UserLoginViaOTP(ctx context.Context, in *UserLoginViaOTPRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, AccountService_UserLoginViaOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UserLoginViaPassword(ctx context.Context, in *UserLoginViaPasswordRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, AccountService_UserLoginViaPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetOTPForSignUp(ctx context.Context, in *GetOTPForSignUpRequest, opts ...grpc.CallOption) (*GetOTPForSignUpResponse, error) {
	out := new(GetOTPForSignUpResponse)
	err := c.cc.Invoke(ctx, AccountService_GetOTPForSignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UserSignUpViaOTP(ctx context.Context, in *UserSignUpViaOTPRequest, opts ...grpc.CallOption) (*UserSignUpViaOTPResponse, error) {
	out := new(UserSignUpViaOTPResponse)
	err := c.cc.Invoke(ctx, AccountService_UserSignUpViaOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SignedUpUserSettingPw(ctx context.Context, in *SignedUpUserSettingPwRequest, opts ...grpc.CallOption) (*SignedUpUserSettingPwResponse, error) {
	out := new(SignedUpUserSettingPwResponse)
	err := c.cc.Invoke(ctx, AccountService_SignedUpUserSettingPw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, AccountService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdatePasswordUsingOldPw(ctx context.Context, in *UpdatePasswordUsingOldPwRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_UpdatePasswordUsingOldPw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetOTPForPwChange(ctx context.Context, in *GetOTPForPwChangeRequest, opts ...grpc.CallOption) (*GetOTPForPwChangeResponse, error) {
	out := new(GetOTPForPwChangeResponse)
	err := c.cc.Invoke(ctx, AccountService_GetOTPForPwChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) VerifyOTPForPwChange(ctx context.Context, in *VerifyOTPForPwChangeRequest, opts ...grpc.CallOption) (*VerifyOTPForPwChangeResponse, error) {
	out := new(VerifyOTPForPwChangeResponse)
	err := c.cc.Invoke(ctx, AccountService_VerifyOTPForPwChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SetNewPwAfterVerifyingOTP(ctx context.Context, in *SetNewPwAfterVerifyingOTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_SetNewPwAfterVerifyingOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// Login
	GetOTPForLogin(context.Context, *GetOTPForLoginRequest) (*GetOTPForLoginResponse, error)
	UserLoginViaOTP(context.Context, *UserLoginViaOTPRequest) (*UserLoginResponse, error)
	UserLoginViaPassword(context.Context, *UserLoginViaPasswordRequest) (*UserLoginResponse, error)
	// Sign up
	GetOTPForSignUp(context.Context, *GetOTPForSignUpRequest) (*GetOTPForSignUpResponse, error)
	UserSignUpViaOTP(context.Context, *UserSignUpViaOTPRequest) (*UserSignUpViaOTPResponse, error)
	SignedUpUserSettingPw(context.Context, *SignedUpUserSettingPwRequest) (*SignedUpUserSettingPwResponse, error)
	// profile
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*emptypb.Empty, error)
	UpdatePasswordUsingOldPw(context.Context, *UpdatePasswordUsingOldPwRequest) (*emptypb.Empty, error)
	// Password reset
	GetOTPForPwChange(context.Context, *GetOTPForPwChangeRequest) (*GetOTPForPwChangeResponse, error)
	VerifyOTPForPwChange(context.Context, *VerifyOTPForPwChangeRequest) (*VerifyOTPForPwChangeResponse, error)
	SetNewPwAfterVerifyingOTP(context.Context, *SetNewPwAfterVerifyingOTPRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetOTPForLogin(context.Context, *GetOTPForLoginRequest) (*GetOTPForLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTPForLogin not implemented")
}
func (UnimplementedAccountServiceServer) UserLoginViaOTP(context.Context, *UserLoginViaOTPRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginViaOTP not implemented")
}
func (UnimplementedAccountServiceServer) UserLoginViaPassword(context.Context, *UserLoginViaPasswordRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginViaPassword not implemented")
}
func (UnimplementedAccountServiceServer) GetOTPForSignUp(context.Context, *GetOTPForSignUpRequest) (*GetOTPForSignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTPForSignUp not implemented")
}
func (UnimplementedAccountServiceServer) UserSignUpViaOTP(context.Context, *UserSignUpViaOTPRequest) (*UserSignUpViaOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignUpViaOTP not implemented")
}
func (UnimplementedAccountServiceServer) SignedUpUserSettingPw(context.Context, *SignedUpUserSettingPwRequest) (*SignedUpUserSettingPwResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedUpUserSettingPw not implemented")
}
func (UnimplementedAccountServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAccountServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedAccountServiceServer) UpdatePasswordUsingOldPw(context.Context, *UpdatePasswordUsingOldPwRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordUsingOldPw not implemented")
}
func (UnimplementedAccountServiceServer) GetOTPForPwChange(context.Context, *GetOTPForPwChangeRequest) (*GetOTPForPwChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTPForPwChange not implemented")
}
func (UnimplementedAccountServiceServer) VerifyOTPForPwChange(context.Context, *VerifyOTPForPwChangeRequest) (*VerifyOTPForPwChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTPForPwChange not implemented")
}
func (UnimplementedAccountServiceServer) SetNewPwAfterVerifyingOTP(context.Context, *SetNewPwAfterVerifyingOTPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewPwAfterVerifyingOTP not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetOTPForLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTPForLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetOTPForLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetOTPForLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetOTPForLogin(ctx, req.(*GetOTPForLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UserLoginViaOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginViaOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UserLoginViaOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UserLoginViaOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UserLoginViaOTP(ctx, req.(*UserLoginViaOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UserLoginViaPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginViaPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UserLoginViaPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UserLoginViaPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UserLoginViaPassword(ctx, req.(*UserLoginViaPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetOTPForSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTPForSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetOTPForSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetOTPForSignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetOTPForSignUp(ctx, req.(*GetOTPForSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UserSignUpViaOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUpViaOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UserSignUpViaOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UserSignUpViaOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UserSignUpViaOTP(ctx, req.(*UserSignUpViaOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SignedUpUserSettingPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedUpUserSettingPwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SignedUpUserSettingPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SignedUpUserSettingPw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SignedUpUserSettingPw(ctx, req.(*SignedUpUserSettingPwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdatePasswordUsingOldPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordUsingOldPwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdatePasswordUsingOldPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdatePasswordUsingOldPw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdatePasswordUsingOldPw(ctx, req.(*UpdatePasswordUsingOldPwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetOTPForPwChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTPForPwChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetOTPForPwChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetOTPForPwChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetOTPForPwChange(ctx, req.(*GetOTPForPwChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_VerifyOTPForPwChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPForPwChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).VerifyOTPForPwChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_VerifyOTPForPwChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).VerifyOTPForPwChange(ctx, req.(*VerifyOTPForPwChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SetNewPwAfterVerifyingOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNewPwAfterVerifyingOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SetNewPwAfterVerifyingOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SetNewPwAfterVerifyingOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SetNewPwAfterVerifyingOTP(ctx, req.(*SetNewPwAfterVerifyingOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOTPForLogin",
			Handler:    _AccountService_GetOTPForLogin_Handler,
		},
		{
			MethodName: "UserLoginViaOTP",
			Handler:    _AccountService_UserLoginViaOTP_Handler,
		},
		{
			MethodName: "UserLoginViaPassword",
			Handler:    _AccountService_UserLoginViaPassword_Handler,
		},
		{
			MethodName: "GetOTPForSignUp",
			Handler:    _AccountService_GetOTPForSignUp_Handler,
		},
		{
			MethodName: "UserSignUpViaOTP",
			Handler:    _AccountService_UserSignUpViaOTP_Handler,
		},
		{
			MethodName: "SignedUpUserSettingPw",
			Handler:    _AccountService_SignedUpUserSettingPw_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _AccountService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _AccountService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdatePasswordUsingOldPw",
			Handler:    _AccountService_UpdatePasswordUsingOldPw_Handler,
		},
		{
			MethodName: "GetOTPForPwChange",
			Handler:    _AccountService_GetOTPForPwChange_Handler,
		},
		{
			MethodName: "VerifyOTPForPwChange",
			Handler:    _AccountService_VerifyOTPForPwChange_Handler,
		},
		{
			MethodName: "SetNewPwAfterVerifyingOTP",
			Handler:    _AccountService_SetNewPwAfterVerifyingOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/protobuf/account.proto",
}
