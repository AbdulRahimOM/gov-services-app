// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/protobuf/userAccount.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAccountService_UserLoginGetOTP_FullMethodName               = "/UserAccountService/UserLoginGetOTP"
	UserAccountService_UserLoginVerifyOTP_FullMethodName            = "/UserAccountService/UserLoginVerifyOTP"
	UserAccountService_UserLoginViaPassword_FullMethodName          = "/UserAccountService/UserLoginViaPassword"
	UserAccountService_UserSignUpGetOTP_FullMethodName              = "/UserAccountService/UserSignUpGetOTP"
	UserAccountService_UserSignUpVerifyOTP_FullMethodName           = "/UserAccountService/UserSignUpVerifyOTP"
	UserAccountService_SignedUpUserSettingPw_FullMethodName         = "/UserAccountService/SignedUpUserSettingPw"
	UserAccountService_UserGetProfile_FullMethodName                = "/UserAccountService/UserGetProfile"
	UserAccountService_UserUpdateProfile_FullMethodName             = "/UserAccountService/UserUpdateProfile"
	UserAccountService_UserUpdatePasswordUsingOldPw_FullMethodName  = "/UserAccountService/UserUpdatePasswordUsingOldPw"
	UserAccountService_UserGetOTPForPwChange_FullMethodName         = "/UserAccountService/UserGetOTPForPwChange"
	UserAccountService_UserVerifyOTPForPwChange_FullMethodName      = "/UserAccountService/UserVerifyOTPForPwChange"
	UserAccountService_UserSetNewPwAfterVerifyingOTP_FullMethodName = "/UserAccountService/UserSetNewPwAfterVerifyingOTP"
)

// UserAccountServiceClient is the client API for UserAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountServiceClient interface {
	// Login
	UserLoginGetOTP(ctx context.Context, in *UserLoginGetOTPRequest, opts ...grpc.CallOption) (*UserLoginGetOTPResponse, error)
	UserLoginVerifyOTP(ctx context.Context, in *UserLoginVerifyOTPRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserLoginViaPassword(ctx context.Context, in *UserLoginViaPasswordRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// Sign up
	UserSignUpGetOTP(ctx context.Context, in *UserSignUpGetOTPRequest, opts ...grpc.CallOption) (*UserSignUpGetOTPResponse, error)
	UserSignUpVerifyOTP(ctx context.Context, in *UserSignUpVerifyOTPRequest, opts ...grpc.CallOption) (*UserSignUpVerifyOTPResponse, error)
	SignedUpUserSettingPw(ctx context.Context, in *SignedUpUserSettingPwRequest, opts ...grpc.CallOption) (*SignedUpUserSettingPwResponse, error)
	// profile
	UserGetProfile(ctx context.Context, in *UserGetProfileRequest, opts ...grpc.CallOption) (*UserGetProfileResponse, error)
	UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserUpdatePasswordUsingOldPw(ctx context.Context, in *UserUpdatePasswordUsingOldPwRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Password reset
	UserGetOTPForPwChange(ctx context.Context, in *UserGetOTPForPwChangeRequest, opts ...grpc.CallOption) (*UserGetOTPForPwChangeResponse, error)
	UserVerifyOTPForPwChange(ctx context.Context, in *UserVerifyOTPForPwChangeRequest, opts ...grpc.CallOption) (*UserVerifyOTPForPwChangeResponse, error)
	UserSetNewPwAfterVerifyingOTP(ctx context.Context, in *UserSetNewPwAfterVerifyingOTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountServiceClient(cc grpc.ClientConnInterface) UserAccountServiceClient {
	return &userAccountServiceClient{cc}
}

func (c *userAccountServiceClient) UserLoginGetOTP(ctx context.Context, in *UserLoginGetOTPRequest, opts ...grpc.CallOption) (*UserLoginGetOTPResponse, error) {
	out := new(UserLoginGetOTPResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserLoginGetOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserLoginVerifyOTP(ctx context.Context, in *UserLoginVerifyOTPRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserLoginVerifyOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserLoginViaPassword(ctx context.Context, in *UserLoginViaPasswordRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserLoginViaPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserSignUpGetOTP(ctx context.Context, in *UserSignUpGetOTPRequest, opts ...grpc.CallOption) (*UserSignUpGetOTPResponse, error) {
	out := new(UserSignUpGetOTPResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserSignUpGetOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserSignUpVerifyOTP(ctx context.Context, in *UserSignUpVerifyOTPRequest, opts ...grpc.CallOption) (*UserSignUpVerifyOTPResponse, error) {
	out := new(UserSignUpVerifyOTPResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserSignUpVerifyOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) SignedUpUserSettingPw(ctx context.Context, in *SignedUpUserSettingPwRequest, opts ...grpc.CallOption) (*SignedUpUserSettingPwResponse, error) {
	out := new(SignedUpUserSettingPwResponse)
	err := c.cc.Invoke(ctx, UserAccountService_SignedUpUserSettingPw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserGetProfile(ctx context.Context, in *UserGetProfileRequest, opts ...grpc.CallOption) (*UserGetProfileResponse, error) {
	out := new(UserGetProfileResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserGetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccountService_UserUpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserUpdatePasswordUsingOldPw(ctx context.Context, in *UserUpdatePasswordUsingOldPwRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccountService_UserUpdatePasswordUsingOldPw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserGetOTPForPwChange(ctx context.Context, in *UserGetOTPForPwChangeRequest, opts ...grpc.CallOption) (*UserGetOTPForPwChangeResponse, error) {
	out := new(UserGetOTPForPwChangeResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserGetOTPForPwChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserVerifyOTPForPwChange(ctx context.Context, in *UserVerifyOTPForPwChangeRequest, opts ...grpc.CallOption) (*UserVerifyOTPForPwChangeResponse, error) {
	out := new(UserVerifyOTPForPwChangeResponse)
	err := c.cc.Invoke(ctx, UserAccountService_UserVerifyOTPForPwChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UserSetNewPwAfterVerifyingOTP(ctx context.Context, in *UserSetNewPwAfterVerifyingOTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccountService_UserSetNewPwAfterVerifyingOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServiceServer is the server API for UserAccountService service.
// All implementations must embed UnimplementedUserAccountServiceServer
// for forward compatibility
type UserAccountServiceServer interface {
	// Login
	UserLoginGetOTP(context.Context, *UserLoginGetOTPRequest) (*UserLoginGetOTPResponse, error)
	UserLoginVerifyOTP(context.Context, *UserLoginVerifyOTPRequest) (*UserLoginResponse, error)
	UserLoginViaPassword(context.Context, *UserLoginViaPasswordRequest) (*UserLoginResponse, error)
	// Sign up
	UserSignUpGetOTP(context.Context, *UserSignUpGetOTPRequest) (*UserSignUpGetOTPResponse, error)
	UserSignUpVerifyOTP(context.Context, *UserSignUpVerifyOTPRequest) (*UserSignUpVerifyOTPResponse, error)
	SignedUpUserSettingPw(context.Context, *SignedUpUserSettingPwRequest) (*SignedUpUserSettingPwResponse, error)
	// profile
	UserGetProfile(context.Context, *UserGetProfileRequest) (*UserGetProfileResponse, error)
	UserUpdateProfile(context.Context, *UserUpdateProfileRequest) (*emptypb.Empty, error)
	UserUpdatePasswordUsingOldPw(context.Context, *UserUpdatePasswordUsingOldPwRequest) (*emptypb.Empty, error)
	// Password reset
	UserGetOTPForPwChange(context.Context, *UserGetOTPForPwChangeRequest) (*UserGetOTPForPwChangeResponse, error)
	UserVerifyOTPForPwChange(context.Context, *UserVerifyOTPForPwChangeRequest) (*UserVerifyOTPForPwChangeResponse, error)
	UserSetNewPwAfterVerifyingOTP(context.Context, *UserSetNewPwAfterVerifyingOTPRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserAccountServiceServer()
}

// UnimplementedUserAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServiceServer struct {
}

func (UnimplementedUserAccountServiceServer) UserLoginGetOTP(context.Context, *UserLoginGetOTPRequest) (*UserLoginGetOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginGetOTP not implemented")
}
func (UnimplementedUserAccountServiceServer) UserLoginVerifyOTP(context.Context, *UserLoginVerifyOTPRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginVerifyOTP not implemented")
}
func (UnimplementedUserAccountServiceServer) UserLoginViaPassword(context.Context, *UserLoginViaPasswordRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginViaPassword not implemented")
}
func (UnimplementedUserAccountServiceServer) UserSignUpGetOTP(context.Context, *UserSignUpGetOTPRequest) (*UserSignUpGetOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignUpGetOTP not implemented")
}
func (UnimplementedUserAccountServiceServer) UserSignUpVerifyOTP(context.Context, *UserSignUpVerifyOTPRequest) (*UserSignUpVerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignUpVerifyOTP not implemented")
}
func (UnimplementedUserAccountServiceServer) SignedUpUserSettingPw(context.Context, *SignedUpUserSettingPwRequest) (*SignedUpUserSettingPwResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedUpUserSettingPw not implemented")
}
func (UnimplementedUserAccountServiceServer) UserGetProfile(context.Context, *UserGetProfileRequest) (*UserGetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetProfile not implemented")
}
func (UnimplementedUserAccountServiceServer) UserUpdateProfile(context.Context, *UserUpdateProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateProfile not implemented")
}
func (UnimplementedUserAccountServiceServer) UserUpdatePasswordUsingOldPw(context.Context, *UserUpdatePasswordUsingOldPwRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePasswordUsingOldPw not implemented")
}
func (UnimplementedUserAccountServiceServer) UserGetOTPForPwChange(context.Context, *UserGetOTPForPwChangeRequest) (*UserGetOTPForPwChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetOTPForPwChange not implemented")
}
func (UnimplementedUserAccountServiceServer) UserVerifyOTPForPwChange(context.Context, *UserVerifyOTPForPwChangeRequest) (*UserVerifyOTPForPwChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVerifyOTPForPwChange not implemented")
}
func (UnimplementedUserAccountServiceServer) UserSetNewPwAfterVerifyingOTP(context.Context, *UserSetNewPwAfterVerifyingOTPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetNewPwAfterVerifyingOTP not implemented")
}
func (UnimplementedUserAccountServiceServer) mustEmbedUnimplementedUserAccountServiceServer() {}

// UnsafeUserAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServiceServer will
// result in compilation errors.
type UnsafeUserAccountServiceServer interface {
	mustEmbedUnimplementedUserAccountServiceServer()
}

func RegisterUserAccountServiceServer(s grpc.ServiceRegistrar, srv UserAccountServiceServer) {
	s.RegisterService(&UserAccountService_ServiceDesc, srv)
}

func _UserAccountService_UserLoginGetOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginGetOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserLoginGetOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserLoginGetOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserLoginGetOTP(ctx, req.(*UserLoginGetOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserLoginVerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginVerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserLoginVerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserLoginVerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserLoginVerifyOTP(ctx, req.(*UserLoginVerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserLoginViaPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginViaPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserLoginViaPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserLoginViaPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserLoginViaPassword(ctx, req.(*UserLoginViaPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserSignUpGetOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUpGetOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserSignUpGetOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserSignUpGetOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserSignUpGetOTP(ctx, req.(*UserSignUpGetOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserSignUpVerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUpVerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserSignUpVerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserSignUpVerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserSignUpVerifyOTP(ctx, req.(*UserSignUpVerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_SignedUpUserSettingPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedUpUserSettingPwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).SignedUpUserSettingPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_SignedUpUserSettingPw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).SignedUpUserSettingPw(ctx, req.(*SignedUpUserSettingPwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserGetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserGetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserGetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserGetProfile(ctx, req.(*UserGetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserUpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserUpdateProfile(ctx, req.(*UserUpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserUpdatePasswordUsingOldPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdatePasswordUsingOldPwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserUpdatePasswordUsingOldPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserUpdatePasswordUsingOldPw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserUpdatePasswordUsingOldPw(ctx, req.(*UserUpdatePasswordUsingOldPwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserGetOTPForPwChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetOTPForPwChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserGetOTPForPwChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserGetOTPForPwChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserGetOTPForPwChange(ctx, req.(*UserGetOTPForPwChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserVerifyOTPForPwChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVerifyOTPForPwChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserVerifyOTPForPwChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserVerifyOTPForPwChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserVerifyOTPForPwChange(ctx, req.(*UserVerifyOTPForPwChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UserSetNewPwAfterVerifyingOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetNewPwAfterVerifyingOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UserSetNewPwAfterVerifyingOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UserSetNewPwAfterVerifyingOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UserSetNewPwAfterVerifyingOTP(ctx, req.(*UserSetNewPwAfterVerifyingOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountService_ServiceDesc is the grpc.ServiceDesc for UserAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserAccountService",
	HandlerType: (*UserAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLoginGetOTP",
			Handler:    _UserAccountService_UserLoginGetOTP_Handler,
		},
		{
			MethodName: "UserLoginVerifyOTP",
			Handler:    _UserAccountService_UserLoginVerifyOTP_Handler,
		},
		{
			MethodName: "UserLoginViaPassword",
			Handler:    _UserAccountService_UserLoginViaPassword_Handler,
		},
		{
			MethodName: "UserSignUpGetOTP",
			Handler:    _UserAccountService_UserSignUpGetOTP_Handler,
		},
		{
			MethodName: "UserSignUpVerifyOTP",
			Handler:    _UserAccountService_UserSignUpVerifyOTP_Handler,
		},
		{
			MethodName: "SignedUpUserSettingPw",
			Handler:    _UserAccountService_SignedUpUserSettingPw_Handler,
		},
		{
			MethodName: "UserGetProfile",
			Handler:    _UserAccountService_UserGetProfile_Handler,
		},
		{
			MethodName: "UserUpdateProfile",
			Handler:    _UserAccountService_UserUpdateProfile_Handler,
		},
		{
			MethodName: "UserUpdatePasswordUsingOldPw",
			Handler:    _UserAccountService_UserUpdatePasswordUsingOldPw_Handler,
		},
		{
			MethodName: "UserGetOTPForPwChange",
			Handler:    _UserAccountService_UserGetOTPForPwChange_Handler,
		},
		{
			MethodName: "UserVerifyOTPForPwChange",
			Handler:    _UserAccountService_UserVerifyOTPForPwChange_Handler,
		},
		{
			MethodName: "UserSetNewPwAfterVerifyingOTP",
			Handler:    _UserAccountService_UserSetNewPwAfterVerifyingOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/protobuf/userAccount.proto",
}
