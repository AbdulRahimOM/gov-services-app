// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/protobuf/chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KsebChatService_UserSendMessage_FullMethodName  = "/KsebChatService/UserSendMessage"
	KsebChatService_AdminSendMessage_FullMethodName = "/KsebChatService/AdminSendMessage"
	KsebChatService_UserChat_FullMethodName         = "/KsebChatService/UserChat"
	KsebChatService_AdminChat_FullMethodName        = "/KsebChatService/AdminChat"
)

// KsebChatServiceClient is the client API for KsebChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KsebChatServiceClient interface {
	UserSendMessage(ctx context.Context, in *UserSendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	AdminSendMessage(ctx context.Context, in *AdminSendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	UserChat(ctx context.Context, in *UserChatRequest, opts ...grpc.CallOption) (KsebChatService_UserChatClient, error)
	AdminChat(ctx context.Context, in *AdminChatRequest, opts ...grpc.CallOption) (KsebChatService_AdminChatClient, error)
}

type ksebChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKsebChatServiceClient(cc grpc.ClientConnInterface) KsebChatServiceClient {
	return &ksebChatServiceClient{cc}
}

func (c *ksebChatServiceClient) UserSendMessage(ctx context.Context, in *UserSendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, KsebChatService_UserSendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ksebChatServiceClient) AdminSendMessage(ctx context.Context, in *AdminSendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, KsebChatService_AdminSendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ksebChatServiceClient) UserChat(ctx context.Context, in *UserChatRequest, opts ...grpc.CallOption) (KsebChatService_UserChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &KsebChatService_ServiceDesc.Streams[0], KsebChatService_UserChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ksebChatServiceUserChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KsebChatService_UserChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type ksebChatServiceUserChatClient struct {
	grpc.ClientStream
}

func (x *ksebChatServiceUserChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ksebChatServiceClient) AdminChat(ctx context.Context, in *AdminChatRequest, opts ...grpc.CallOption) (KsebChatService_AdminChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &KsebChatService_ServiceDesc.Streams[1], KsebChatService_AdminChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ksebChatServiceAdminChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KsebChatService_AdminChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type ksebChatServiceAdminChatClient struct {
	grpc.ClientStream
}

func (x *ksebChatServiceAdminChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KsebChatServiceServer is the server API for KsebChatService service.
// All implementations must embed UnimplementedKsebChatServiceServer
// for forward compatibility
type KsebChatServiceServer interface {
	UserSendMessage(context.Context, *UserSendMessageRequest) (*SendMessageResponse, error)
	AdminSendMessage(context.Context, *AdminSendMessageRequest) (*SendMessageResponse, error)
	UserChat(*UserChatRequest, KsebChatService_UserChatServer) error
	AdminChat(*AdminChatRequest, KsebChatService_AdminChatServer) error
	mustEmbedUnimplementedKsebChatServiceServer()
}

// UnimplementedKsebChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKsebChatServiceServer struct {
}

func (UnimplementedKsebChatServiceServer) UserSendMessage(context.Context, *UserSendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSendMessage not implemented")
}
func (UnimplementedKsebChatServiceServer) AdminSendMessage(context.Context, *AdminSendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSendMessage not implemented")
}
func (UnimplementedKsebChatServiceServer) UserChat(*UserChatRequest, KsebChatService_UserChatServer) error {
	return status.Errorf(codes.Unimplemented, "method UserChat not implemented")
}
func (UnimplementedKsebChatServiceServer) AdminChat(*AdminChatRequest, KsebChatService_AdminChatServer) error {
	return status.Errorf(codes.Unimplemented, "method AdminChat not implemented")
}
func (UnimplementedKsebChatServiceServer) mustEmbedUnimplementedKsebChatServiceServer() {}

// UnsafeKsebChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KsebChatServiceServer will
// result in compilation errors.
type UnsafeKsebChatServiceServer interface {
	mustEmbedUnimplementedKsebChatServiceServer()
}

func RegisterKsebChatServiceServer(s grpc.ServiceRegistrar, srv KsebChatServiceServer) {
	s.RegisterService(&KsebChatService_ServiceDesc, srv)
}

func _KsebChatService_UserSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsebChatServiceServer).UserSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KsebChatService_UserSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsebChatServiceServer).UserSendMessage(ctx, req.(*UserSendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KsebChatService_AdminSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsebChatServiceServer).AdminSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KsebChatService_AdminSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsebChatServiceServer).AdminSendMessage(ctx, req.(*AdminSendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KsebChatService_UserChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KsebChatServiceServer).UserChat(m, &ksebChatServiceUserChatServer{stream})
}

type KsebChatService_UserChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type ksebChatServiceUserChatServer struct {
	grpc.ServerStream
}

func (x *ksebChatServiceUserChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _KsebChatService_AdminChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdminChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KsebChatServiceServer).AdminChat(m, &ksebChatServiceAdminChatServer{stream})
}

type KsebChatService_AdminChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type ksebChatServiceAdminChatServer struct {
	grpc.ServerStream
}

func (x *ksebChatServiceAdminChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// KsebChatService_ServiceDesc is the grpc.ServiceDesc for KsebChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KsebChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KsebChatService",
	HandlerType: (*KsebChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSendMessage",
			Handler:    _KsebChatService_UserSendMessage_Handler,
		},
		{
			MethodName: "AdminSendMessage",
			Handler:    _KsebChatService_AdminSendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserChat",
			Handler:       _KsebChatService_UserChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AdminChat",
			Handler:       _KsebChatService_AdminChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protobuf/chat.proto",
}
