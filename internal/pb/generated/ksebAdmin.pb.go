// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: pb/protobuf/ksebAdmin.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckIfComplaintAccessibleToAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32 `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	ComplaintId int32 `protobuf:"varint,2,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
}

func (x *CheckIfComplaintAccessibleToAdminRequest) Reset() {
	*x = CheckIfComplaintAccessibleToAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfComplaintAccessibleToAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfComplaintAccessibleToAdminRequest) ProtoMessage() {}

func (x *CheckIfComplaintAccessibleToAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfComplaintAccessibleToAdminRequest.ProtoReflect.Descriptor instead.
func (*CheckIfComplaintAccessibleToAdminRequest) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{0}
}

func (x *CheckIfComplaintAccessibleToAdminRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CheckIfComplaintAccessibleToAdminRequest) GetComplaintId() int32 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

type CloseComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	ComplaintId int32  `protobuf:"varint,2,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
	Remarks     string `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CloseComplaintRequest) Reset() {
	*x = CloseComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseComplaintRequest) ProtoMessage() {}

func (x *CloseComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseComplaintRequest.ProtoReflect.Descriptor instead.
func (*CloseComplaintRequest) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{1}
}

func (x *CloseComplaintRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CloseComplaintRequest) GetComplaintId() int32 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

func (x *CloseComplaintRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type OpenComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32 `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	ComplaintId int32 `protobuf:"varint,2,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
}

func (x *OpenComplaintRequest) Reset() {
	*x = OpenComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenComplaintRequest) ProtoMessage() {}

func (x *OpenComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenComplaintRequest.ProtoReflect.Descriptor instead.
func (*OpenComplaintRequest) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{2}
}

func (x *OpenComplaintRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *OpenComplaintRequest) GetComplaintId() int32 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

type GetComplaintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId        int32                        `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	SearchCriteria *KsebComplaintSearchCriteria `protobuf:"bytes,2,opt,name=searchCriteria,proto3" json:"searchCriteria,omitempty"`
}

func (x *GetComplaintsRequest) Reset() {
	*x = GetComplaintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplaintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplaintsRequest) ProtoMessage() {}

func (x *GetComplaintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplaintsRequest.ProtoReflect.Descriptor instead.
func (*GetComplaintsRequest) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{3}
}

func (x *GetComplaintsRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *GetComplaintsRequest) GetSearchCriteria() *KsebComplaintSearchCriteria {
	if x != nil {
		return x.SearchCriteria
	}
	return nil
}

type KsebComplaintSearchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AttenderScope string `protobuf:"bytes,2,opt,name=attenderScope,proto3" json:"attenderScope,omitempty"`
}

func (x *KsebComplaintSearchCriteria) Reset() {
	*x = KsebComplaintSearchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KsebComplaintSearchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KsebComplaintSearchCriteria) ProtoMessage() {}

func (x *KsebComplaintSearchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KsebComplaintSearchCriteria.ProtoReflect.Descriptor instead.
func (*KsebComplaintSearchCriteria) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{4}
}

func (x *KsebComplaintSearchCriteria) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KsebComplaintSearchCriteria) GetAttenderScope() string {
	if x != nil {
		return x.AttenderScope
	}
	return ""
}

type GetComplaintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complaints []*KsebComplaint `protobuf:"bytes,1,rep,name=complaints,proto3" json:"complaints,omitempty"`
}

func (x *GetComplaintsResponse) Reset() {
	*x = GetComplaintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplaintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplaintsResponse) ProtoMessage() {}

func (x *GetComplaintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplaintsResponse.ProtoReflect.Descriptor instead.
func (*GetComplaintsResponse) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{5}
}

func (x *GetComplaintsResponse) GetComplaints() []*KsebComplaint {
	if x != nil {
		return x.Complaints
	}
	return nil
}

type KsebComplaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID         int32  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Description    string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	ConsumerNumber string `protobuf:"bytes,6,opt,name=ConsumerNumber,proto3" json:"ConsumerNumber,omitempty"`
	AttenderID     int32  `protobuf:"varint,7,opt,name=AttenderID,proto3" json:"AttenderID,omitempty"`
	Status         string `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatedAt      string `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Remarks        string `protobuf:"bytes,10,opt,name=Remarks,proto3" json:"Remarks,omitempty"`
	ClosedAt       string `protobuf:"bytes,12,opt,name=ClosedAt,proto3" json:"ClosedAt,omitempty"`
}

func (x *KsebComplaint) Reset() {
	*x = KsebComplaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KsebComplaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KsebComplaint) ProtoMessage() {}

func (x *KsebComplaint) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KsebComplaint.ProtoReflect.Descriptor instead.
func (*KsebComplaint) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{6}
}

func (x *KsebComplaint) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *KsebComplaint) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *KsebComplaint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KsebComplaint) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KsebComplaint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KsebComplaint) GetConsumerNumber() string {
	if x != nil {
		return x.ConsumerNumber
	}
	return ""
}

func (x *KsebComplaint) GetAttenderID() int32 {
	if x != nil {
		return x.AttenderID
	}
	return 0
}

func (x *KsebComplaint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KsebComplaint) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *KsebComplaint) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *KsebComplaint) GetClosedAt() string {
	if x != nil {
		return x.ClosedAt
	}
	return ""
}

type RegisterSectionCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	SectionCode string `protobuf:"bytes,2,opt,name=sectionCode,proto3" json:"sectionCode,omitempty"`
	OfficeId    int32  `protobuf:"varint,3,opt,name=officeId,proto3" json:"officeId,omitempty"`
}

func (x *RegisterSectionCodeRequest) Reset() {
	*x = RegisterSectionCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSectionCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSectionCodeRequest) ProtoMessage() {}

func (x *RegisterSectionCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protobuf_ksebAdmin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSectionCodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterSectionCodeRequest) Descriptor() ([]byte, []int) {
	return file_pb_protobuf_ksebAdmin_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterSectionCodeRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *RegisterSectionCodeRequest) GetSectionCode() string {
	if x != nil {
		return x.SectionCode
	}
	return ""
}

func (x *RegisterSectionCodeRequest) GetOfficeId() int32 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

var File_pb_protobuf_ksebAdmin_proto protoreflect.FileDescriptor

var file_pb_protobuf_ksebAdmin_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6b, 0x73,
	0x65, 0x62, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x28, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x52, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x73, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x5b, 0x0a,
	0x1b, 0x6b, 0x73, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4b, 0x73, 0x65, 0x62, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x4b, 0x73, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0x74, 0x0a,
	0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x32, 0x63, 0x0a, 0x13, 0x4b, 0x53, 0x45, 0x42, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x90, 0x03, 0x0a, 0x16, 0x4b, 0x53, 0x45,
	0x42, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4b, 0x73,
	0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x29, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e,
	0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_protobuf_ksebAdmin_proto_rawDescOnce sync.Once
	file_pb_protobuf_ksebAdmin_proto_rawDescData = file_pb_protobuf_ksebAdmin_proto_rawDesc
)

func file_pb_protobuf_ksebAdmin_proto_rawDescGZIP() []byte {
	file_pb_protobuf_ksebAdmin_proto_rawDescOnce.Do(func() {
		file_pb_protobuf_ksebAdmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_protobuf_ksebAdmin_proto_rawDescData)
	})
	return file_pb_protobuf_ksebAdmin_proto_rawDescData
}

var file_pb_protobuf_ksebAdmin_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pb_protobuf_ksebAdmin_proto_goTypes = []interface{}{
	(*CheckIfComplaintAccessibleToAdminRequest)(nil), // 0: CheckIfComplaintAccessibleToAdminRequest
	(*CloseComplaintRequest)(nil),                    // 1: CloseComplaintRequest
	(*OpenComplaintRequest)(nil),                     // 2: OpenComplaintRequest
	(*GetComplaintsRequest)(nil),                     // 3: GetComplaintsRequest
	(*KsebComplaintSearchCriteria)(nil),              // 4: ksebComplaintSearchCriteria
	(*GetComplaintsResponse)(nil),                    // 5: GetComplaintsResponse
	(*KsebComplaint)(nil),                            // 6: KsebComplaint
	(*RegisterSectionCodeRequest)(nil),               // 7: RegisterSectionCodeRequest
	(*emptypb.Empty)(nil),                            // 8: google.protobuf.Empty
}
var file_pb_protobuf_ksebAdmin_proto_depIdxs = []int32{
	4, // 0: GetComplaintsRequest.searchCriteria:type_name -> ksebComplaintSearchCriteria
	6, // 1: GetComplaintsResponse.complaints:type_name -> KsebComplaint
	7, // 2: KSEBAdminAccService.RegisterSectionCode:input_type -> RegisterSectionCodeRequest
	7, // 3: KSEBAgencyAdminService.RegisterSectionCode:input_type -> RegisterSectionCodeRequest
	3, // 4: KSEBAgencyAdminService.GetComplaints:input_type -> GetComplaintsRequest
	2, // 5: KSEBAgencyAdminService.OpenComplaint:input_type -> OpenComplaintRequest
	1, // 6: KSEBAgencyAdminService.CloseComplaint:input_type -> CloseComplaintRequest
	0, // 7: KSEBAgencyAdminService.CheckIfComplaintAccessibleToAdmin:input_type -> CheckIfComplaintAccessibleToAdminRequest
	8, // 8: KSEBAdminAccService.RegisterSectionCode:output_type -> google.protobuf.Empty
	8, // 9: KSEBAgencyAdminService.RegisterSectionCode:output_type -> google.protobuf.Empty
	5, // 10: KSEBAgencyAdminService.GetComplaints:output_type -> GetComplaintsResponse
	6, // 11: KSEBAgencyAdminService.OpenComplaint:output_type -> KsebComplaint
	8, // 12: KSEBAgencyAdminService.CloseComplaint:output_type -> google.protobuf.Empty
	8, // 13: KSEBAgencyAdminService.CheckIfComplaintAccessibleToAdmin:output_type -> google.protobuf.Empty
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pb_protobuf_ksebAdmin_proto_init() }
func file_pb_protobuf_ksebAdmin_proto_init() {
	if File_pb_protobuf_ksebAdmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_protobuf_ksebAdmin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfComplaintAccessibleToAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplaintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KsebComplaintSearchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplaintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KsebComplaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_protobuf_ksebAdmin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSectionCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_protobuf_ksebAdmin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pb_protobuf_ksebAdmin_proto_goTypes,
		DependencyIndexes: file_pb_protobuf_ksebAdmin_proto_depIdxs,
		MessageInfos:      file_pb_protobuf_ksebAdmin_proto_msgTypes,
	}.Build()
	File_pb_protobuf_ksebAdmin_proto = out.File
	file_pb_protobuf_ksebAdmin_proto_rawDesc = nil
	file_pb_protobuf_ksebAdmin_proto_goTypes = nil
	file_pb_protobuf_ksebAdmin_proto_depIdxs = nil
}
