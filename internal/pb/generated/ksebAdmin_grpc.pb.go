// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/protobuf/ksebAdmin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KSEBAdminAccService_RegisterSectionCode_FullMethodName = "/KSEBAdminAccService/RegisterSectionCode"
)

// KSEBAdminAccServiceClient is the client API for KSEBAdminAccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KSEBAdminAccServiceClient interface {
	RegisterSectionCode(ctx context.Context, in *RegisterSectionCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kSEBAdminAccServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKSEBAdminAccServiceClient(cc grpc.ClientConnInterface) KSEBAdminAccServiceClient {
	return &kSEBAdminAccServiceClient{cc}
}

func (c *kSEBAdminAccServiceClient) RegisterSectionCode(ctx context.Context, in *RegisterSectionCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KSEBAdminAccService_RegisterSectionCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KSEBAdminAccServiceServer is the server API for KSEBAdminAccService service.
// All implementations must embed UnimplementedKSEBAdminAccServiceServer
// for forward compatibility
type KSEBAdminAccServiceServer interface {
	RegisterSectionCode(context.Context, *RegisterSectionCodeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKSEBAdminAccServiceServer()
}

// UnimplementedKSEBAdminAccServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKSEBAdminAccServiceServer struct {
}

func (UnimplementedKSEBAdminAccServiceServer) RegisterSectionCode(context.Context, *RegisterSectionCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSectionCode not implemented")
}
func (UnimplementedKSEBAdminAccServiceServer) mustEmbedUnimplementedKSEBAdminAccServiceServer() {}

// UnsafeKSEBAdminAccServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KSEBAdminAccServiceServer will
// result in compilation errors.
type UnsafeKSEBAdminAccServiceServer interface {
	mustEmbedUnimplementedKSEBAdminAccServiceServer()
}

func RegisterKSEBAdminAccServiceServer(s grpc.ServiceRegistrar, srv KSEBAdminAccServiceServer) {
	s.RegisterService(&KSEBAdminAccService_ServiceDesc, srv)
}

func _KSEBAdminAccService_RegisterSectionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSectionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KSEBAdminAccServiceServer).RegisterSectionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KSEBAdminAccService_RegisterSectionCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KSEBAdminAccServiceServer).RegisterSectionCode(ctx, req.(*RegisterSectionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KSEBAdminAccService_ServiceDesc is the grpc.ServiceDesc for KSEBAdminAccService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KSEBAdminAccService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KSEBAdminAccService",
	HandlerType: (*KSEBAdminAccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSectionCode",
			Handler:    _KSEBAdminAccService_RegisterSectionCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/protobuf/ksebAdmin.proto",
}

const (
	KSEBAgencyAdminService_RegisterSectionCode_FullMethodName = "/KSEBAgencyAdminService/RegisterSectionCode"
)

// KSEBAgencyAdminServiceClient is the client API for KSEBAgencyAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KSEBAgencyAdminServiceClient interface {
	// admin
	RegisterSectionCode(ctx context.Context, in *RegisterSectionCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kSEBAgencyAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKSEBAgencyAdminServiceClient(cc grpc.ClientConnInterface) KSEBAgencyAdminServiceClient {
	return &kSEBAgencyAdminServiceClient{cc}
}

func (c *kSEBAgencyAdminServiceClient) RegisterSectionCode(ctx context.Context, in *RegisterSectionCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KSEBAgencyAdminService_RegisterSectionCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KSEBAgencyAdminServiceServer is the server API for KSEBAgencyAdminService service.
// All implementations must embed UnimplementedKSEBAgencyAdminServiceServer
// for forward compatibility
type KSEBAgencyAdminServiceServer interface {
	// admin
	RegisterSectionCode(context.Context, *RegisterSectionCodeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKSEBAgencyAdminServiceServer()
}

// UnimplementedKSEBAgencyAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKSEBAgencyAdminServiceServer struct {
}

func (UnimplementedKSEBAgencyAdminServiceServer) RegisterSectionCode(context.Context, *RegisterSectionCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSectionCode not implemented")
}
func (UnimplementedKSEBAgencyAdminServiceServer) mustEmbedUnimplementedKSEBAgencyAdminServiceServer() {
}

// UnsafeKSEBAgencyAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KSEBAgencyAdminServiceServer will
// result in compilation errors.
type UnsafeKSEBAgencyAdminServiceServer interface {
	mustEmbedUnimplementedKSEBAgencyAdminServiceServer()
}

func RegisterKSEBAgencyAdminServiceServer(s grpc.ServiceRegistrar, srv KSEBAgencyAdminServiceServer) {
	s.RegisterService(&KSEBAgencyAdminService_ServiceDesc, srv)
}

func _KSEBAgencyAdminService_RegisterSectionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSectionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KSEBAgencyAdminServiceServer).RegisterSectionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KSEBAgencyAdminService_RegisterSectionCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KSEBAgencyAdminServiceServer).RegisterSectionCode(ctx, req.(*RegisterSectionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KSEBAgencyAdminService_ServiceDesc is the grpc.ServiceDesc for KSEBAgencyAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KSEBAgencyAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KSEBAgencyAdminService",
	HandlerType: (*KSEBAgencyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSectionCode",
			Handler:    _KSEBAgencyAdminService_RegisterSectionCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/protobuf/ksebAdmin.proto",
}
